package common

import chisel3.util._

// RV32I Base Integer Instruction Set ( RISC-V User-Level ISA V2.2 )
object Instructions {
  // RDレジスタ即値書き込み命令
  val LUI    = BitPat("b?????????????????????????0110111") // U-Type (Load Upper Immediate)
  val AUIPC  = BitPat("b?????????????????????????0010111") // U-Type (Add Upper Immediate to PC)

  // ジャンプ命令
  val JAL     = BitPat("b?????????????????????????1101111") // J-Type (Jump And Link)
  val JALR    = BitPat("b?????????????????000?????1100111") // I-Type (Jump And Link Register)

  // 条件分岐命令
  val BEQ     = BitPat("b?????????????????000?????1100011") // B-Type (Branch If Equal)
  val BNE     = BitPat("b?????????????????001?????1100011") // B-Type (Branch If Not Equal)
  val BLT     = BitPat("b?????????????????100?????1100011") // B-Type (Branch If Less Than)
  val BGE     = BitPat("b?????????????????101?????1100011") // B-Type (Branch If Greater Than or Equal)
  val BLTU    = BitPat("b?????????????????110?????1100011") // B-Type (Branch If Less Than Unsigned)
  val BGEU    = BitPat("b?????????????????111?????1100011") // B-Type (Branch If Greater Than or Equal Unsigned)

  // データロード命令
  val LB      = BitPat("b?????????????????000?????0000011") // I-Type (Load Byte)
  val LH      = BitPat("b?????????????????001?????0000011") // I-Type (Load Halfword)
  val LW      = BitPat("b?????????????????010?????0000011") // I-Type (Load Word)
  val LBU     = BitPat("b?????????????????100?????0000011") // I-Type (Load Byte Unsigned)
  val LHU     = BitPat("b?????????????????101?????0000011") // I-Type (Load Halfword Unsigned)

  // データストア命令
  val SB      = BitPat("b?????????????????000?????0100011") // S-Type (Store Byte)
  val SH      = BitPat("b?????????????????001?????0100011") // S-Type (Store Halfword)
  val SW      = BitPat("b?????????????????010?????0100011") // S-Type (Store Word)

  // 算術・論理演算命令
  val ADDI    = BitPat("b?????????????????000?????0010011") // I-Type (Add Immediate)
  val SLTI    = BitPat("b?????????????????010?????0010011") // I-Type (Set Less Than Immediate)
  val SLTIU   = BitPat("b?????????????????011?????0010011") // I-Type (Set Less Than Immediate Unsigned)
  val XORI    = BitPat("b?????????????????100?????0010011") // I-Type (XOR Immediate)
  val ORI     = BitPat("b?????????????????110?????0010011") // I-Type (OR Immediate)
  val ANDI    = BitPat("b?????????????????111?????0010011") // I-Type (AND Immediate)

  val SLLI    = BitPat("b0000000??????????001?????0010011") // R-Type (Shift Left Logical Immediate)
  val SRLI    = BitPat("b0000000??????????101?????0010011") // R-Type (Shift Right Logical Immediate)
  val SRAI    = BitPat("b0100000??????????101?????0010011") // R-Type (Shift Right Arithmetic Immediate)

  val ADD     = BitPat("b0000000??????????000?????0110011") // R-Type (Add)
  val SUB     = BitPat("b0100000??????????000?????0110011") // R-Type (Subtract)
  val SLL     = BitPat("b0000000??????????001?????0110011") // R-Type (Shift Left Logical)
  val SLT     = BitPat("b0000000??????????010?????0110011") // R-Type (Set Less Than)
  val SLTU    = BitPat("b0000000??????????011?????0110011") // R-Type (Set Less Than Unsigned)
  val XOR     = BitPat("b0000000??????????100?????0110011") // R-Type (XOR)
  val SRL     = BitPat("b0000000??????????101?????0110011") // R-Type (Shift Right Logical)
  val SRA     = BitPat("b0100000??????????101?????0110011") // R-Type (Shift Right Arithmetic)
  val OR      = BitPat("b0000000??????????110?????0110011") // R-Type (OR)
  val AND     = BitPat("b0000000??????????111?????0110011") // R-Type (AND)

  // メモリ操作実行順序指定命令
  val FENCE   = BitPat("b0000????000000000000000000001111") // I-Type (Fence)
  val FENCE_I = BitPat("b00000000000000000010000000001111") // I-Type (Fence Immediate)

  // 環境呼び出し命令
  val ECALL   = BitPat("b00000000000000000000000001110011") // I-Type (Environment Call)
  val EBREAK  = BitPat("b00000000000100000000000001110011") // I-Type (Environment Breakpoint)

  // システム命令
  val CSRRW   = BitPat("b?????????????????001?????1110011") // I-Type (Control and Status Register Read and Write)
  val CSRRS   = BitPat("b?????????????????010?????1110011") // I-Type (Control and Status Register Read and Set Bits)
  val CSRRC   = BitPat("b?????????????????011?????1110011") // I-Type (Control and Status Register Read and Clear Bits)
  val CSRRWI  = BitPat("b?????????????????101?????1110011") // I-Type (Control and Status Register Read and Write Immediate)
  val CSRRSI  = BitPat("b?????????????????110?????1110011") // I-Type (Control and Status Register Read and Set Bits Immediate)
  val CSRRCI  = BitPat("b?????????????????111?????1110011") // I-Type (Control and Status Register Read and Clear Bits Immediate)
}